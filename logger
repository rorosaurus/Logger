-- set up wireless notification!
-- there's no way to determine if we've picked up a random block, we might not end when all slots are as full as they'll get..


tArgs = { ... }
if #tArgs ~= 1 then
	print( "Usage: logger <numOfTrees>" )
	return
end

size = tonumber( tArgs[1] )
if size < 1 then
	print( "Number of trees must be positive" )
	return
end

hasSaplings = true

-- note: program assumes saplings are rubber and have 2 blocks inbetween them
position = 0
-- position zero will be our home base.  we will start and return here.

function setup()
	print("Please enter the new number of trees")
	newSize = read()
	if(tonumber(newSize) < 1) then
		print("Invalid number of trees.  Please try again.")
		setup()
	else
		size = tonumber(newSize)
		print("Number of trees changed to " .. tostring(size))
	end
	menu()
end

function safeMoveForward()
	while(not turtle.forward()) do
		turtle.dig()
	end
end

-- consumes the tree directly in front of the turtle and ends with the turtle occupying where the tree was
function logTree()
	turtle.dig()
	safeMoveForward()
	turtle.select(2)
	while (turtle.compareUp()) do
		turtle.digUp()
		turtle.up()
	end
	while (not turtle.detectDown()) do
		turtle.down()
	end
	turtle.digDown()
	if(hasSaplings) then
		turtle.select(1)
		turtle.placeDown()
		if(turtle.getItemCount(1) == 1) then
			hasSaplings = false
		end
	end
end

-- this function loops the logging until out of saplings
function loopedLog()
	checkSlots()
	-- we start at position 0.  so trees will be at 2, 5, 8, 11, etc.
	-- don't go further
	shouldContinue = true
	print(tostring(hasSaplings))
	print("Starting logging process...")
	turtle.up()
	while(shouldContinue) do
		while(position < size*3) do
			turtle.select(2)
			if(turtle.compare()) then
				logTree()
				position = position + 1
			else if (math.floor(position/3)*3+2 == position) then
				placeSaplingBelow()
			end
			end
			-- either way, move forward and properly increment position
			safeMoveForward()
			position = position + 1
		end
		turtle.turnRight()
		turtle.turnRight()
		while(position > 0) do
			turtle.select(2)
			if(turtle.compare()) then
				logTree()
				position = position - 1
			else if (math.floor(position/3)*3+2 == position) then
				placeSaplingBelow()
			end
			end
			-- either way, move forward and properly increment position
			safeMoveForward()
			position = position - 1
		end
		turtle.turnRight()
		turtle.turnRight()
		if(not hasSaplings or (
		turtle.getItemSpace(2) == 0 and
		turtle.getItemSpace(3) == 0 and
		turtle.getItemSpace(4) == 0 and
		turtle.getItemSpace(5) == 0 and
		turtle.getItemSpace(6) == 0 and
		turtle.getItemSpace(7) == 0 and
		turtle.getItemSpace(8) == 0 and
		turtle.getItemSpace(9) == 0)) then
			-- we are out of saplings OR full of wood
			shouldContinue = false
		end
	end
	turtle.down()
	notify(true)
	print("Logging process completed")
	menu()
end

function placeSaplingBelow()
	turtle.select(1)
	if(not turtle.compareDown()) then
		turtle.digDown()
	end
	if(hasSaplings) then
		turtle.select(1)
		turtle.placeDown()
		if(turtle.getItemCount(1) == 1) then
			hasSaplings = false
		end
	end
end

function notify(value)
	redstone.setOutput("bottom", value)
	--also notify wirelessly
end

function dropPayload()
	print("Dropping payload")
	for i = 3,9 do
		turtle.select(i)
		if(turtle.getItemCount(i) > 0) then
			turtle.drop()
		end
	end
	turtle.select(2)
	numWood = turtle.getItemCount(2)
	if(numWood > 0) then
		turtle.drop(numWood-1)
	end
	print("Payload Dropped")
	notify(false)
	menu()
end

function checkSlots()
	print("Checking slots...")
	valid = true
	-- check slot 1 for at least one item
	numOfSaps = turtle.getItemCount(1)
	if(numOfSaps < 1) then
		print("Please add saplings to the first slot")
		valid = false
	end
	numOfWood = turtle.getItemCount(2)
	if(numOfWood < 1) then
		print("Please add the appropriate wood to the second slot")
		valid = false
	end
	if(valid) then 
		print("Slots are filled.")
		print("Does slot 1 contain saplings?")
		answer = read()
		if(answer == "yes" or answer == "YES" or answer == "y" or answer == "Y") then
			print("Does slot 2 contain the wood of that sapling type?")
			answer = read()
			if(answer == "yes" or answer == "YES" or answer == "y" or answer == "Y") then
				print("Slots are verified.  Continuing.")
				hasSaplings = turtle.getItemCount(1) > 1
				return
			else menu()
			end
		else menu()
		end
	else menu()
	end
end

function menu()
	print("Number of trees currently set to " .. tostring(size))
	print("Please enter a command")
	print("setup - change number of trees")
	print("drop - drop payload")
	print("log - cut down and replace trees")
	print("exit - close the program")
	command = read()
	if(command == "setup") then setup()
	else if(command == "drop") then dropPayload()
	else if(command == "log") then loopedLog()
	else if(command == "exit") then return
	else
		print("Invalid selection.  Please try again.")
		menu()
	end
	end
	end
	end
end

menu()
